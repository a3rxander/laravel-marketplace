version: '3.8'

services:
  # PHP-FPM Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: marketplace_app
    restart: unless-stopped
    working_dir: /var/www
    volumes:
      - ./src:/var/www
      - ./docker/php/local.ini:/usr/local/etc/php/conf.d/local.ini
    networks:
      - marketplace_network
    depends_on:
      - mysql
      - redis
      - elasticsearch

  # Nginx Web Server
  nginx:
    image: nginx:alpine
    container_name: marketplace_nginx
    restart: unless-stopped
    ports:
      - "8000:80"
    volumes:
      - ./src:/var/www
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
    networks:
      - marketplace_network
    depends_on:
      - app

  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: marketplace_mysql
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: marketplace
      MYSQL_ROOT_PASSWORD: secret
      MYSQL_PASSWORD: secret
      MYSQL_USER: marketplace
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docker/mysql/my.cnf:/etc/mysql/my.cnf
    networks:
      - marketplace_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: marketplace_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - marketplace_network
    command: redis-server --appendonly yes

  # Memcached
  memcached:
    image: memcached:alpine
    container_name: marketplace_memcached
    restart: unless-stopped
    ports:
      - "11211:11211"
    networks:
      - marketplace_network

  # Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: marketplace_elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
      - ./docker/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
    networks:
      - marketplace_network

  # Laravel Horizon Queue Worker
  horizon:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: marketplace_horizon
    restart: unless-stopped
    command: php artisan horizon
    working_dir: /var/www
    volumes:
      - ./src:/var/www
      - ./docker/php/local.ini:/usr/local/etc/php/conf.d/local.ini
    networks:
      - marketplace_network
    depends_on:
      - app
      - redis
      - mysql

  # Queue Worker (backup)
  queue:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: marketplace_queue
    restart: unless-stopped
    command: php artisan queue:work --sleep=3 --tries=3 --max-time=3600
    working_dir: /var/www
    volumes:
      - ./src:/var/www
      - ./docker/php/local.ini:/usr/local/etc/php/conf.d/local.ini
    networks:
      - marketplace_network
    depends_on:
      - app
      - redis
      - mysql

  # Scheduler (Cron jobs)
  scheduler:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: marketplace_scheduler
    restart: unless-stopped
    command: >
      sh -c "echo '* * * * * cd /var/www && php artisan schedule:run >> /dev/null 2>&1' > /etc/crontabs/www-data
             && crond -f -l 8"
    working_dir: /var/www
    volumes:
      - ./marketplace:/var/www
      - ./docker/php/local.ini:/usr/local/etc/php/conf.d/local.ini
    networks:
      - marketplace_network
    depends_on:
      - app

  # Mailhog (for email testing)
  mailhog:
    image: mailhog/mailhog
    container_name: marketplace_mailhog
    ports:
      - "1025:1025"
      - "8025:8025"
    networks:
      - marketplace_network

networks:
  marketplace_network:
    driver: bridge

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  elasticsearch_data:
    driver: local